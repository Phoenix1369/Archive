typedef vector<int> vin;
const int MAXN = 305;
bool seen[MAXN];

class Solution {
    vector<vin> G;
    vin I;
    int cnt, N, res, val;

public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        G = move(graph);
        I = move(initial);
        N = G.size();
        res = val = N;
        for (auto node: I) {
            exclude(node);
            if ((cnt < val) || ((cnt == val) && (node < res))) {
                res = node;
                val = cnt;
            }
        }
        return res;
    }

private:
    void dfs(int cur, int ban) {
        if (seen[cur]) {
            return;
        }
        seen[cur] = true;
        for (int nxt = 0; nxt < N; ++nxt) {
            if (G[cur][nxt]) {
                dfs(nxt, ban);
            }
        }
        ++cnt;
    }

    void exclude(int ban) {
        cnt = 0;
        for (int i = 0; i < N; ++i) {
            seen[i] = false;
        }
        seen[ban] = true;
        for (auto src: I) {
            dfs(src, ban);
        }
    }
};

